#!/usr/bin/env python3

#===================================================================
# Plot stellar mass - M500 relation for all haloes (clusters)
# within R500
# stack radial profiles generated by plot_radial_profiles.py
# in combination with get_halostats.sh, plot them, and
# fit NFW profiles on top of it
#
# the script is looking for all available files named
# output_XXXXX/radial-profile-metadata-XXXXX-<int>.dat files
#
# This script needs one command line argument: the output number
# to work with
#===================================================================

import numpy as np
import matplotlib as mpl
#  mpl.use('Agg')
import matplotlib.pyplot as plt
#  plt.ioff()
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable, axes_size
import matplotlib.colors as colors
from scipy.optimize import curve_fit
import pickle
import os
from sys import argv



# use LaTeX text
from matplotlib import rc
rc('font', **{'family':'serif',
    'serif':['Computer Modern Roman'],
    'monospace': ['Computer Modern Typewriter']})
rc('text', usetex=True)
rc("figure", **{"dpi":200})



#  omega_m = 0.315
#  omega_b = 0.0486
omega_m = 0.27
omega_b = 0.0469



def getfloat(f):
    """
    Read in a line that has exactly one float as its content
    f: pointer to file / file object
    """
    line = f.readline()
    line = line.strip()
    return float(line)




def SMF(M, line):
    """
    Get abundance matching stellar mass for given halo mass M
    Taken from appendix A in https://arxiv.org/pdf/1401.7329.pdf 

    M: for which line to work
    line: which line of table 3 in https://arxiv.org/pdf/1401.7329.pdf to work with
    """
    if line == 1:
        log10M1= 11.39
        log10epsilon = -1.618
        alpha = 1.795
        delta = 4.345
        gamma = 0.619

    if line == 2:
        log10M1= 11.35
        log10epsilon = -1.642
        alpha = 1.779
        delta = 4.394
        gamma = 0.547

    if line == 3:
        log10M1= 11.32
        log10epsilon = -1.527
        alpha = 1.856
        delta = 4.376
        gamma = 0.644
 
    if line == 4:
        log10M1= 11.28
        log10epsilon = -1.556
        alpha = 1.835
        delta = 4.437
        gamma = 0.567

    def f(x):
        return - np.log10(10.0**(alpha * x) + 1) + delta * (np.log10(1. + np.exp(x)))**gamma / (1.0 + np.exp(10.0**(-x)))

    f0 = f(0.)
    log10Mstar = log10M1 + log10epsilon + f(np.log10(M) - log10M1) - f0
    return 10.**log10Mstar


if __name__ == "__main__":

    outputnr = argv[1]

    outputdir = os.path.join(os.getcwd(), "output_"+outputnr.zfill(5))
    if not os.path.isdir(outputdir):
        print( "Didn't find output directory ", outputdir, "quitting" )
        quit()

    # find all ellegible files
    dirlist = os.listdir(outputdir)
    filelist = []
    namestart = 'radial-profile-metadata-'
    for f in dirlist:
        if f.startswith(namestart) and f.endswith(".dat"):
            filelist.append(os.path.join(outputdir, f))



    # get halo metadata

    R200 = []
    R500 = []
    M200 = []
    M500 = []
    SMtot = []
    SMcen = []
    SMsat = []
    SMsatAll = []
    haloes = []

    print("{0:10} | {1:12} {2:12} | {3:12} {4:12} | {5:12} {6:12} {7:12}".format("halo", "m200", "r200", "m500", "r500", "SMcen", "SMsat", "SMtot"))

    for fname in filelist:

        f = open(fname)
        f.readline() # skip comment
        xc = getfloat(f)
        yc = getfloat(f)
        zc = getfloat(f)
        f.readline() # skip comment
        r200 = getfloat(f)
        f.readline() # skip comment
        rmax = getfloat(f)
        f.readline() # skip comment
        m200 = getfloat(f)
        f.readline() # skip comment
        r500 = getfloat(f)
        f.readline() # skip comment
        m500 = getfloat(f)
        f.readline() # skip comment
        msat = getfloat(f)
        f.readline() # skip comment
        mcen = getfloat(f)
        f.readline() # skip comment
        morph = getfloat(f)
        f.readline() # skip comment
        mtot = getfloat(f)

        f.close()

        # find halo ID from filename
        nodat = fname[:-4]
        for dashind in range(len(nodat), 0, -1):
            char = nodat[dashind-1]
            if char == '-':
                halo = int(nodat[dashind:])
                break



        # get galaxy profile
        gfname = os.path.join(outputdir, 'profile-galaxies-'+str(halo)+'.dat')
        mg, xg, yg, zg = np.loadtxt(gfname, dtype='float', skiprows=1, unpack=True)

        rg = np.sqrt((xg - xc)**2 + (yg - yc)**2 + (zg - zc)**2)
        # get sattelite mass < R500
        msat = np.sum(mg[1:][rg[1:] <= r500])

        #  print(halo, "Keeping", mg[rg <= r500].shape[0]-1, "satellites out of", mg.shape[0]-1)


        # get orphans profile
        ofname = os.path.join(outputdir, 'profile-orphans-'+str(halo)+'.dat')
        mo, xo, yo, zo = np.loadtxt(ofname, dtype='float', skiprows=1, unpack=True)

        # get orphan mass < R500
        ro = np.sqrt((xo - xc)**2 + (yo - yc)**2 + (zo - zc)**2)
        moprh = np.sum(mo[ro <= r500])

        #  print("max rgal:", rg.max(), "max rorph:", ro.max())
        #  print(halo, "Keeping", mo[ro <= r500].shape[0], "orphans out of", mo.shape[0])
        #  print()


        R200.append(r200)
        R500.append(r500)
        M200.append(m200)
        M500.append(m500)
        SMcen.append(mcen)
        SMsat.append(msat)
        SMsatAll.append(msat+morph)
        SMtot.append(mtot)

        haloes.append(halo)

        print("{0:10d} | {1:12.4e} {2:12.4e} | {3:12.4e} {4:12.4e} | {5:12.4e} {6:12.4e} {7:12.4e}".format(halo, m200, r200, m500, r500, mcen, msat, mtot))
        #  print()


    M500 = np.array(M500)
    SMcen = np.array(SMcen)
    SMtot = np.array(SMtot)
    SMsat = np.array(SMsat)
    SMsatAll = np.array(SMsatAll)
    SMorph = SMsatAll - SMsat

    #  print(M500)
    #  print(SMtot)



    # create plots

    fig = plt.figure(figsize=(9,3))

    ax1 = fig.add_subplot(131, aspect='equal')
    ax1.scatter(M500, SMcen*omega_m/omega_b/M500)
    ax1.set_title("Central galaxies")

    ax2 = fig.add_subplot(132, aspect='equal')
    ax2.scatter(M500, SMsatAll*omega_m/omega_b/M500, label="including orphans")
    #  ax2.scatter(M500, SMsat*omega_m/omega_b/M500, label="excluding orphans")
    ax2.set_title("Satellite galaxies")

    ax3 = fig.add_subplot(133, aspect='equal')
    ax3.scatter(M500, SMtot*omega_m/omega_b/M500, label="including orphans")
    #  ax3.scatter(M500, (SMtot-SMorph)*omega_m/omega_b/M500, label="excluding orphans")
    ax3.set_title("All galaxies")


    M = np.logspace(10, 16, 200)
    SMF1 = SMF(M, 1)
    SMF2 = SMF(M, 2)
    SMF3 = SMF(M, 3)
    SMF4 = SMF(M, 4)

    for i, SMF in enumerate([SMF1, SMF2, SMF3, SMF4]):
        ax1.loglog(M, SMF/M * (omega_m/omega_b), label=str(i+1))

    #  ax1 = fig.add_subplot(131, aspect='equal')
    #  ax2 = fig.add_subplot(132, aspect='equal')
    #  ax3 = fig.add_subplot(133, aspect='equal')
    #  ax1.set_title("Central galaxies")
    #  ax2.set_title("Satellite galaxies")
    #  ax3.set_title("All galaxies")
    #
    #  for i, halo in enumerate(haloes):
    #      ax1.scatter(M500[i], SMcen[i]*omega_m/omega_b/M500[i], label=str(halo))
    #      ax2.scatter(M500[i], SMsat[i]*omega_m/omega_b/M500[i], label=str(halo))
    #      ax3.scatter(M500[i], SMtot[i]*omega_m/omega_b/M500[i], label=str(halo))
    #

    for ax in fig.axes:
        ax.set_xscale('log')
        ax.set_yscale('log')
        ax.set_xlabel(r"$M_{500}$")
        ax.set_ylabel(r"$M_*(<R500)/M_{500}$ $[\Omega_b/\Omega_m]$")
        ax.legend()

        ax.set_xlim(1e11, 1e15)
        ax.set_ylim(1e-3, 50)
        ax.grid()





    # save image
    fname = "stellar-mass-vs-halo-mass-"+outputnr+".png"
    plt.tight_layout()
    #  plt.show()
    plt.savefig(fname)
    print("saved figure", fname)
    plt.close()
